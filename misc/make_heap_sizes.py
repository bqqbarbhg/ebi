from collections import namedtuple
from itertools import chain
from bisect import bisect_left

SizeClass = namedtuple("SizeClass", "max_size slab_offset slab_count")

max_slab_count = 128
slab_header_bytes = 64
target_slab_bytes = 16*1024

size_classes = []

ranges = chain(
    range(  16,   128,    16),
    range( 128,   256,    32),
    range( 256,   512,    64),
    range( 512,  2048,   256),
    [2048],
)

slab_offset = 0
for max_size in ranges:
    slab_space = target_slab_bytes - slab_header_bytes
    slab_count = min(max_slab_count, slab_space // max_size)
    size_classes.append(SizeClass(max_size, slab_offset, slab_count))
    slab_offset += slab_count

sizes = [s.max_size for s in size_classes]

size_to_class = []

for size in range(16, 2048+1, 16):
    ix = bisect_left(sizes, size)
    size_to_class.append(ix)

def format_cols(data, fmt, sep, num_cols):
    for base in range(0, len(data), num_cols):
        block = data[base:base+num_cols]
        yield sep.join(fmt.format(d) for d in block)

print("// Generated by misc/make_heap_sizes.py")
print(f"#define EBI_HEAP_CLASSES {len(sizes)}")
print(f"#define EBI_HEAP_SLAB_OFFSETS {slab_offset}")
print("")
print(f"extern const ebi_heap_class ebi_heap_classes[EBI_HEAP_CLASSES];")
print(f"extern const uint8_t ebi_heap_size_to_class[{len(size_to_class)}];")

print("")

print("// Generated by misc/make_heap_sizes.py")
print("const ebi_heap_class ebi_heap_classes[EBI_HEAP_CLASSES] = {")
cfmt = "{{ {0.max_size:4d}, {0.slab_offset:4d}, {0.slab_count:3d} }},"
for c in format_cols(size_classes, cfmt, " ", 3):
    print("\t" + c)
print("};")

print(f"const uint8_t ebi_heap_size_to_class[{len(size_to_class)}] = {{")
for c in format_cols(size_to_class, "{:2d},", " ", 16):
    print("\t" + c)
print("};")
